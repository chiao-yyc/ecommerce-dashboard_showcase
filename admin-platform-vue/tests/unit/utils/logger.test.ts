import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import {
  logger,
  createModuleLogger,
  getLoggerConfig,
  updateLoggerConfig,
  LogLevel,
  performanceTimer,
  logIf,
} from '../logger'

describe('Logger System', () => {
  let consoleDebugSpy: ReturnType<typeof vi.spyOn>
  let consoleInfoSpy: ReturnType<typeof vi.spyOn>
  let consoleWarnSpy: ReturnType<typeof vi.spyOn>
  let consoleErrorSpy: ReturnType<typeof vi.spyOn>

  beforeEach(() => {
    consoleDebugSpy = vi.spyOn(console, 'debug').mockImplementation(() => {})
    consoleInfoSpy = vi.spyOn(console, 'info').mockImplementation(() => {})
    consoleWarnSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})
    consoleErrorSpy = vi.spyOn(console, 'error').mockImplementation(() => {})
  })

  afterEach(() => {
    consoleDebugSpy.mockRestore()
    consoleInfoSpy.mockRestore()
    consoleWarnSpy.mockRestore()
    consoleErrorSpy.mockRestore()
  })

  describe('Âü∫Êú¨ÂäüËÉΩ', () => {
    it('ÊáâË©≤Ê≠£Á¢∫Ëº∏Âá∫ debug Êó•Ë™å', () => {
      updateLoggerConfig({ level: LogLevel.DEBUG })
      logger.debug('Ê∏¨Ë©¶Ë®äÊÅØ', { data: 'test' })
      expect(consoleDebugSpy).toHaveBeenCalled()
    })

    it('ÊáâË©≤Ê≠£Á¢∫Ëº∏Âá∫ info Êó•Ë™å', () => {
      updateLoggerConfig({ level: LogLevel.INFO })
      logger.info('Ë≥áË®äË®äÊÅØ')
      expect(consoleInfoSpy).toHaveBeenCalled()
    })

    it('ÊáâË©≤Ê≠£Á¢∫Ëº∏Âá∫ warn Êó•Ë™å', () => {
      updateLoggerConfig({ level: LogLevel.WARN })
      logger.warn('Ë≠¶ÂëäË®äÊÅØ')
      expect(consoleWarnSpy).toHaveBeenCalled()
    })

    it('ÊáâË©≤Ê≠£Á¢∫Ëº∏Âá∫ error Êó•Ë™å', () => {
      updateLoggerConfig({ level: LogLevel.ERROR })
      const error = new Error('Ê∏¨Ë©¶ÈåØË™§')
      logger.error('ÈåØË™§Ë®äÊÅØ', error)
      expect(consoleErrorSpy).toHaveBeenCalled()
    })
  })

  describe('Êó•Ë™åÁ≠âÁ¥öÊéßÂà∂', () => {
    it('Áï∂Á≠âÁ¥öÁÇ∫ ERROR ÊôÇÔºåÊáâË©≤Âè™Ëº∏Âá∫ error', () => {
      updateLoggerConfig({ level: LogLevel.ERROR })

      logger.debug('debug')
      logger.info('info')
      logger.warn('warn')
      logger.error('error')

      expect(consoleDebugSpy).not.toHaveBeenCalled()
      expect(consoleInfoSpy).not.toHaveBeenCalled()
      expect(consoleWarnSpy).not.toHaveBeenCalled()
      expect(consoleErrorSpy).toHaveBeenCalled()
    })

    it('Áï∂Á≠âÁ¥öÁÇ∫ SILENT ÊôÇÔºåÊáâË©≤‰∏çËº∏Âá∫‰ªª‰ΩïÊó•Ë™å', () => {
      updateLoggerConfig({ level: LogLevel.SILENT })

      logger.debug('debug')
      logger.info('info')
      logger.warn('warn')
      logger.error('error')

      expect(consoleDebugSpy).not.toHaveBeenCalled()
      expect(consoleInfoSpy).not.toHaveBeenCalled()
      expect(consoleWarnSpy).not.toHaveBeenCalled()
      expect(consoleErrorSpy).not.toHaveBeenCalled()
    })

    it('Áï∂Á≠âÁ¥öÁÇ∫ DEBUG ÊôÇÔºåÊáâË©≤Ëº∏Âá∫ÊâÄÊúâÊó•Ë™å', () => {
      updateLoggerConfig({ level: LogLevel.DEBUG })

      logger.debug('debug')
      logger.info('info')
      logger.warn('warn')
      logger.error('error')

      expect(consoleDebugSpy).toHaveBeenCalled()
      expect(consoleInfoSpy).toHaveBeenCalled()
      expect(consoleWarnSpy).toHaveBeenCalled()
      expect(consoleErrorSpy).toHaveBeenCalled()
    })
  })

  describe('Ê®°ÁµÑ Logger', () => {
    it('ÊáâË©≤Âª∫Á´ãÂÖ∑ÊúâÊ®°ÁµÑ‰∏ä‰∏ãÊñáÁöÑ Logger', () => {
      updateLoggerConfig({ level: LogLevel.DEBUG })
      const moduleLog = createModuleLogger('TestModule', 'SubModule')

      moduleLog.debug('Ê∏¨Ë©¶')

      expect(consoleDebugSpy).toHaveBeenCalled()
      const callArgs = consoleDebugSpy.mock.calls[0][0] as string
      expect(callArgs).toContain('[TestModule:SubModule]')
    })

    it('ÊáâË©≤ÊîØÊè¥ÂÉÖÊ®°ÁµÑÂêçÁ®±ÁöÑ Logger', () => {
      updateLoggerConfig({ level: LogLevel.DEBUG })
      const moduleLog = createModuleLogger('TestModule')

      moduleLog.debug('Ê∏¨Ë©¶')

      expect(consoleDebugSpy).toHaveBeenCalled()
      const callArgs = consoleDebugSpy.mock.calls[0][0] as string
      expect(callArgs).toContain('[TestModule]')
      expect(callArgs).not.toContain('SubModule')
    })
  })

  describe('Ë∑ØÁî±Ë™øË©¶ÂäüËÉΩ', () => {
    it('Áï∂ÂïüÁî®Ë∑ØÁî±Ë™øË©¶ÊôÇÔºåÊáâË©≤Ëº∏Âá∫ routerDebug', () => {
      updateLoggerConfig({ level: LogLevel.DEBUG, enableRouterDebug: true })
      const log = createModuleLogger('Router')

      log.routerDebug('Ë∑ØÁî±Ê∏¨Ë©¶')

      expect(consoleDebugSpy).toHaveBeenCalled()
    })

    it('Áï∂ÈóúÈñâË∑ØÁî±Ë™øË©¶ÊôÇÔºåÊáâË©≤‰∏çËº∏Âá∫ routerDebug', () => {
      updateLoggerConfig({ level: LogLevel.DEBUG, enableRouterDebug: false })
      const log = createModuleLogger('Router')

      log.routerDebug('Ë∑ØÁî±Ê∏¨Ë©¶')

      expect(consoleDebugSpy).not.toHaveBeenCalled()
    })
  })

  describe('Â∑•ÂÖ∑ÂáΩÊï∏', () => {
    it('logIf ÊáâË©≤Ê†πÊìöÊ¢ù‰ª∂Ëº∏Âá∫Êó•Ë™å', () => {
      updateLoggerConfig({ level: LogLevel.DEBUG })

      logIf(true, 'debug', 'ÊáâË©≤Ëº∏Âá∫')
      expect(consoleDebugSpy).toHaveBeenCalled()

      consoleDebugSpy.mockClear()

      logIf(false, 'debug', '‰∏çÊáâËº∏Âá∫')
      expect(consoleDebugSpy).not.toHaveBeenCalled()
    })

    it('performanceTimer ÊáâË©≤ËøîÂõûÂÅúÊ≠¢Ë®àÊôÇÂáΩÊï∏', () => {
      const stopTimer = performanceTimer('Ê∏¨Ë©¶Êìç‰Ωú')

      // ÊáâË©≤ËøîÂõû‰∏ÄÂÄãÂáΩÊï∏
      expect(typeof stopTimer).toBe('function')

      // ÂëºÂè´ÂÅúÊ≠¢Ë®àÊôÇÂáΩÊï∏‰∏çÊáâÊããÂá∫ÈåØË™§
      expect(() => stopTimer()).not.toThrow()
    })
  })

  describe('ÈÖçÁΩÆÁÆ°ÁêÜ', () => {
    it('getLoggerConfig ÊáâË©≤ËøîÂõûÁï∂ÂâçÈÖçÁΩÆ', () => {
      const config = getLoggerConfig()

      expect(config).toHaveProperty('level')
      expect(config).toHaveProperty('enableRouterDebug')
      expect(config).toHaveProperty('enableModulePrefix')
      expect(config).toHaveProperty('enableTimestamp')
    })

    it('updateLoggerConfig ÊáâË©≤Êõ¥Êñ∞ÈÖçÁΩÆ', () => {
      const originalConfig = getLoggerConfig()

      updateLoggerConfig({ level: LogLevel.WARN })

      const newConfig = getLoggerConfig()
      expect(newConfig.level).toBe(LogLevel.WARN)
      expect(newConfig.level).not.toBe(originalConfig.level)
    })
  })

  describe('Ë®äÊÅØÊ†ºÂºèÂåñ', () => {
    it('debug Ë®äÊÅØÊáâÂåÖÂê´ üîç ÂúñÁ§∫', () => {
      updateLoggerConfig({ level: LogLevel.DEBUG })
      logger.debug('Ê∏¨Ë©¶')

      const callArgs = consoleDebugSpy.mock.calls[0][0] as string
      expect(callArgs).toContain('üîç')
    })

    it('info Ë®äÊÅØÊáâÂåÖÂê´ üîß ÂúñÁ§∫', () => {
      updateLoggerConfig({ level: LogLevel.INFO })
      logger.info('Ê∏¨Ë©¶')

      const callArgs = consoleInfoSpy.mock.calls[0][0] as string
      expect(callArgs).toContain('üîß')
    })

    it('warn Ë®äÊÅØÊáâÂåÖÂê´ ‚ö†Ô∏è ÂúñÁ§∫', () => {
      updateLoggerConfig({ level: LogLevel.WARN })
      logger.warn('Ê∏¨Ë©¶')

      const callArgs = consoleWarnSpy.mock.calls[0][0] as string
      expect(callArgs).toContain('‚ö†Ô∏è')
    })

    it('error Ë®äÊÅØÊáâÂåÖÂê´ ‚ùå ÂúñÁ§∫', () => {
      updateLoggerConfig({ level: LogLevel.ERROR })
      logger.error('Ê∏¨Ë©¶')

      const callArgs = consoleErrorSpy.mock.calls[0][0] as string
      expect(callArgs).toContain('‚ùå')
    })
  })
})
